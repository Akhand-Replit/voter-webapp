import streamlit as st
import os
from attached_assets.data_processor import process_text_file
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def upload_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    st.title("üì§ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°")

    db = Database()

    # Batch name input
    batch_name = st.text_input("‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ", placeholder="‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®")

    # File upload
    uploaded_files = st.file_uploader(
        "‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®",
        type=['txt'],
        accept_multiple_files=True
    )

    if uploaded_files and batch_name:
        if st.button("‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary"):
            try:
                with st.spinner("‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£ ‡¶ö‡¶≤‡¶õ‡ßá..."):
                    # Check if batch already exists
                    existing_batch = db.get_batch_by_name(batch_name)
                    if existing_batch:
                        batch_id = existing_batch['id']
                        st.info(f"'{batch_name}' ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                    else:
                        # Create new batch
                        batch_id = db.add_batch(batch_name)
                        st.success(f"‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö '{batch_name}' ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")

                    total_records = 0
                    for uploaded_file in uploaded_files:
                        content = uploaded_file.read().decode('utf-8')
                        records = process_text_file(content)

                        # Store records in database
                        for record in records:
                            db.add_record(batch_id, uploaded_file.name, record)
                            total_records += 1

                    st.success(f"‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá {len(uploaded_files)} ‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶è‡¶¨‡¶Ç {total_records} ‡¶ü‡¶ø ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")

            except Exception as e:
                logger.error(f"Upload error: {str(e)}")
                st.error(f"‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")

    # Display existing batches
    st.subheader("‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡¶∏‡¶Æ‡ßÇ‡¶π")
    batches = db.get_all_batches()

    if batches:
        for batch in batches:
            with st.expander(f"‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö: {batch['name']} ({batch['created_at'].strftime('%Y-%m-%d %H:%M')})"):
                records = db.get_batch_records(batch['id'])
                st.write(f"‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°: {len(records)}")
    else:
        st.info("‡¶ï‡ßã‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")

if __name__ == "__main__":
    upload_page()