import streamlit as st
import pandas as pd
import numpy as np
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def all_data_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    st.title("üìÅ ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø")

    db = Database()

    # Get all batches
    batches = db.get_all_batches()

    if not batches:
        st.info("‡¶ï‡ßã‡¶® ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
        return

    # Initialize session state for delete confirmation
    if 'confirm_delete_all' not in st.session_state:
        st.session_state.confirm_delete_all = False
    if 'confirm_delete_batch' not in st.session_state:
        st.session_state.confirm_delete_batch = None
    if 'confirm_delete_file' not in st.session_state:
        st.session_state.confirm_delete_file = None

    # Clear all data button with confirmation dialog
    col1, col2 = st.columns([5, 1])
    with col2:
        if st.button("‡¶∏‡¶¨ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", type="secondary"):
            st.session_state.confirm_delete_all = True

    # Show confirmation dialog for all data deletion
    if st.session_state.confirm_delete_all:
        st.warning("""
        ‚ö†Ô∏è ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ!
        ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?
        ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßÄ‡¶Ø‡¶º!
        """)

        confirm_col1, confirm_col2 = st.columns(2)
        with confirm_col1:
            if st.button("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶∏‡¶¨ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®", type="primary", use_container_width=True):
                try:
                    db.clear_all_data()
                    st.success("‚úÖ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
                    st.session_state.confirm_delete_all = False
                    st.rerun()
                except Exception as e:
                    logger.error(f"Clear data error: {str(e)}")
                    st.error(f"‚ùå ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")

        with confirm_col2:
            if st.button("‡¶®‡¶æ, ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®", type="secondary", use_container_width=True):
                st.session_state.confirm_delete_all = False
                st.rerun()

    # Batch selection
    with col1:
        batch_col1, batch_col2 = st.columns([4, 1])
        with batch_col1:
            selected_batch = st.selectbox(
                "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
                options=[batch['name'] for batch in batches],
                format_func=lambda x: f"‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö: {x}"
            )
        with batch_col2:
            if st.button("üóëÔ∏è ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", key="delete_batch"):
                st.session_state.confirm_delete_batch = selected_batch

    # Show confirmation for batch deletion
    if st.session_state.confirm_delete_batch:
        st.warning(f"""
        ‚ö†Ô∏è ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ!
        ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶ø '{st.session_state.confirm_delete_batch}' ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?
        ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
        """)

        batch_confirm_col1, batch_confirm_col2 = st.columns(2)
        with batch_confirm_col1:
            if st.button("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", type="primary", use_container_width=True):
                try:
                    batch_id = next(batch['id'] for batch in batches if batch['name'] == st.session_state.confirm_delete_batch)
                    db.delete_batch(batch_id)
                    st.success(f"‚úÖ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö '{st.session_state.confirm_delete_batch}' ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
                    st.session_state.confirm_delete_batch = None
                    st.rerun()
                except Exception as e:
                    logger.error(f"Delete batch error: {str(e)}")
                    st.error(f"‚ùå ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")

        with batch_confirm_col2:
            if st.button("‡¶®‡¶æ, ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®", type="secondary", use_container_width=True):
                st.session_state.confirm_delete_batch = None
                st.rerun()

    # Get selected batch details
    selected_batch_id = next(batch['id'] for batch in batches if batch['name'] == selected_batch)

    # Get files for selected batch
    files = db.get_batch_files(selected_batch_id)

    if files:
        file_col1, file_col2 = st.columns([4, 1])
        with file_col1:
            selected_file = st.selectbox(
                "‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
                options=['‡¶∏‡¶¨'] + [file['file_name'] for file in files],
                format_func=lambda x: f"‡¶´‡¶æ‡¶á‡¶≤: {x}" if x != '‡¶∏‡¶¨' else "‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®"
            )
        with file_col2:
            if selected_file != '‡¶∏‡¶¨' and st.button("üóëÔ∏è ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®"):
                st.session_state.confirm_delete_file = selected_file

        # Show confirmation for file deletion
        if st.session_state.confirm_delete_file:
            st.warning(f"""
            ‚ö†Ô∏è ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ!
            ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶ø '{st.session_state.confirm_delete_file}' ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?
            ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
            """)

            file_confirm_col1, file_confirm_col2 = st.columns(2)
            with file_confirm_col1:
                if st.button("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", type="primary", use_container_width=True):
                    try:
                        db.delete_file(selected_batch_id, st.session_state.confirm_delete_file)
                        st.success(f"‚úÖ ‡¶´‡¶æ‡¶á‡¶≤ '{st.session_state.confirm_delete_file}' ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
                        st.session_state.confirm_delete_file = None
                        st.rerun()
                    except Exception as e:
                        logger.error(f"Delete file error: {str(e)}")
                        st.error(f"‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")

            with file_confirm_col2:
                if st.button("‡¶®‡¶æ, ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®", type="secondary", use_container_width=True):
                    st.session_state.confirm_delete_file = None
                    st.rerun()

        # Get records based on selection
        if selected_file == '‡¶∏‡¶¨':
            records = db.get_batch_records(selected_batch_id)
        else:
            records = db.get_file_records(selected_batch_id, selected_file)

        if records:
            # Convert records to DataFrame
            df = pd.DataFrame(records)

            # Show total count
            st.write(f"‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°: {len(records)}")

            # Create editable dataframe
            edited_df = st.data_editor(
                df[[
                    '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç', '‡¶®‡¶æ‡¶Æ', '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç', '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ',
                    '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', '‡¶™‡ßá‡¶∂‡¶æ', '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ', '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ', 
                    'phone_number', 'facebook_link', 'photo_link', 'description',
                    'relationship_status'
                ]],
                column_config={
                    '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç': st.column_config.TextColumn('‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç'),
                    '‡¶®‡¶æ‡¶Æ': st.column_config.TextColumn('‡¶®‡¶æ‡¶Æ'),
                    '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç': st.column_config.TextColumn('‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç'),
                    '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': st.column_config.TextColumn('‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ'),
                    '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': st.column_config.TextColumn('‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ'),
                    '‡¶™‡ßá‡¶∂‡¶æ': st.column_config.TextColumn('‡¶™‡ßá‡¶∂‡¶æ'),
                    '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ': st.column_config.TextColumn('‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ'),
                    '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ': st.column_config.TextColumn('‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ'),
                    'phone_number': st.column_config.TextColumn('‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞'),
                    'facebook_link': st.column_config.LinkColumn('‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï'),
                    'photo_link': st.column_config.TextColumn(
                        '‡¶õ‡¶¨‡¶ø ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï',
                        help="Enter the URL of the image",
                        validate="^https?://.*$"
                    ),
                    'description': st.column_config.TextColumn('‡¶¨‡¶ø‡¶¨‡¶∞‡¶£'),
                    'relationship_status': st.column_config.SelectboxColumn(
                        '‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá‡¶∞ ‡¶ß‡¶∞‡¶£',
                        options=['Regular', 'Friend', 'Enemy', 'Connected'],
                        required=True,
                        default='Regular'
                    )
                },
                hide_index=True,
                use_container_width=True,
                key="data_editor"
            )

            # Update button
            if st.button("‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary"):
                try:
                    # Compare and update changed records
                    changes = edited_df.compare(df[[
                        '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç', '‡¶®‡¶æ‡¶Æ', '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç', '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ',
                        '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', '‡¶™‡ßá‡¶∂‡¶æ', '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ', '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ',
                        'phone_number', 'facebook_link', 'photo_link', 'description',
                        'relationship_status'
                    ]])

                    if not changes.empty:
                        for idx in changes.index:
                            record_id = int(df.iloc[idx]['id'])
                            row_data = edited_df.iloc[idx]
                            updated_data = {
                                '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç': str(row_data['‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç']) if pd.notnull(row_data['‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç']) else '',
                                '‡¶®‡¶æ‡¶Æ': str(row_data['‡¶®‡¶æ‡¶Æ']) if pd.notnull(row_data['‡¶®‡¶æ‡¶Æ']) else '',
                                '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç': str(row_data['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç']) if pd.notnull(row_data['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç']) else '',
                                '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': str(row_data['‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']) if pd.notnull(row_data['‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']) else '',
                                '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': str(row_data['‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']) if pd.notnull(row_data['‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']) else '',
                                '‡¶™‡ßá‡¶∂‡¶æ': str(row_data['‡¶™‡ßá‡¶∂‡¶æ']) if pd.notnull(row_data['‡¶™‡ßá‡¶∂‡¶æ']) else '',
                                '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ': str(row_data['‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ']) if pd.notnull(row_data['‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ']) else '',
                                '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ': str(row_data['‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ']) if pd.notnull(row_data['‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ']) else '',
                                'phone_number': str(row_data['phone_number']) if pd.notnull(row_data['phone_number']) else '',
                                'facebook_link': str(row_data['facebook_link']) if pd.notnull(row_data['facebook_link']) else '',
                                'photo_link': str(row_data['photo_link']) if pd.notnull(row_data['photo_link']) else '',
                                'description': str(row_data['description']) if pd.notnull(row_data['description']) else '',
                                'relationship_status': str(row_data['relationship_status']) if pd.notnull(row_data['relationship_status']) else ''
                            }
                            db.update_record(record_id, updated_data)

                        st.success("‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                        st.rerun()
                except Exception as e:
                    logger.error(f"Update error: {str(e)}")
                    st.error(f"‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")
        else:
            st.info("‡¶ï‡ßã‡¶® ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
    else:
        st.info("‡¶è‡¶á ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá ‡¶ï‡ßã‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡ßá‡¶á")

if __name__ == "__main__":
    all_data_page()
