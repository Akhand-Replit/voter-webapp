import streamlit as st
import pandas as pd
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def display_result_card(result, db):
    # Get batch and file information
    batch_info = db.get_batch_by_id(result['batch_id'])

    with st.container():
        st.markdown("""
        <style>
        .result-card {
            padding: 1rem;
            border-radius: 0.5rem;
            background-color: #f8f9fa;
            margin-bottom: 1rem;
            border: 1px solid #dee2e6;
        }
        </style>
        """, unsafe_allow_html=True)

        with st.container():
            st.markdown('<div class="result-card">', unsafe_allow_html=True)

            # Header with name and ID
            col1, col2 = st.columns([3, 1])
            with col1:
                st.markdown(f"### {result['ржирж╛ржо']}")
            with col2:
                st.markdown(f"**ржХрзНрж░ржорж┐ржХ ржиржВ:** {result['ржХрзНрж░ржорж┐ржХ_ржиржВ']}")

            # Location info with batch name and file name
            st.markdown(f"ЁЯУН **Location:** {batch_info['name']}" + 
                       (f" / {result['file_name']}" if result.get('file_name') else ""))

            # Main details
            col3, col4 = st.columns(2)
            with col3:
                st.markdown(f"**ржнрзЛржЯрж╛рж░ ржиржВ:** {result['ржнрзЛржЯрж╛рж░_ржиржВ']}")
                st.markdown(f"**ржкрж┐рждрж╛рж░ ржирж╛ржо:** {result['ржкрж┐рждрж╛рж░_ржирж╛ржо']}")
                st.markdown(f"**ржорж╛рждрж╛рж░ ржирж╛ржо:** {result['ржорж╛рждрж╛рж░_ржирж╛ржо']}")
            with col4:
                st.markdown(f"**ржкрзЗрж╢рж╛:** {result['ржкрзЗрж╢рж╛']}")
                st.markdown(f"**ржарж┐ржХрж╛ржирж╛:** {result['ржарж┐ржХрж╛ржирж╛']}")
                st.markdown(f"**ржЬржирзНржо рждрж╛рж░рж┐ржЦ:** {result['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ']}")

            # Relationship status
            st.markdown(f"**рж╕ржорзНржкрж░рзНржХрзЗрж░ ржзрж░ржг:** {result['relationship_status']}")

            st.markdown('</div>', unsafe_allow_html=True)

def search_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ рж▓ржЧржЗржи ржХрж░рзБржи")
        return

    st.title("ЁЯФН рждржерзНржп ржЦрзБржБржЬрзБржи")

    db = Database()

    # Advanced search fields
    with st.container():
        col1, col2 = st.columns(2)

        with col1:
            si_number = st.text_input("ржХрзНрж░ржорж┐ржХ ржиржВ")
            name = st.text_input("ржирж╛ржо")
            mothers_name = st.text_input("ржорж╛рждрж╛рж░ ржирж╛ржо")
            date_of_birth = st.text_input("ржЬржирзНржо рждрж╛рж░рж┐ржЦ")

        with col2:
            voter_no = st.text_input("ржнрзЛржЯрж╛рж░ ржиржВ")
            fathers_name = st.text_input("ржкрж┐рждрж╛рж░ ржиржВ")
            occupation = st.text_input("ржкрзЗрж╢рж╛")
            address = st.text_input("ржарж┐ржХрж╛ржирж╛")
            

    # Search buttons
    search_button = st.button("ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи", type="primary", use_container_width=True)

    if search_button:
        try:
            with st.spinner("ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."):
                search_criteria = {
                    'ржХрзНрж░ржорж┐ржХ_ржиржВ': si_number,
                    'ржнрзЛржЯрж╛рж░_ржиржВ': voter_no,
                    'ржирж╛ржо': name,
                    'ржкрж┐рждрж╛рж░_ржирж╛ржо': fathers_name,
                    'ржорж╛рждрж╛рж░_ржирж╛ржо': mothers_name,
                    'ржкрзЗрж╢рж╛': occupation,
                    'ржарж┐ржХрж╛ржирж╛': address,
                    'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ': date_of_birth
                }
                # Remove empty criteria
                search_criteria = {k: v for k, v in search_criteria.items() if v}
                results = db.search_records_advanced(search_criteria)

                if results:
                    st.success(f"{len(results)}ржЯрж┐ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ")

                    # Display results in card format
                    for result in results:
                        display_result_card(result, db)
                else:
                    st.info("ржХрзЛржи ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")

        except Exception as e:
            logger.error(f"Search error: {str(e)}")
            st.error(f"ржЕржирзБрж╕ржирзНржзрж╛ржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")

if __name__ == "__main__":
    search_page()
