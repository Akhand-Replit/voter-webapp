import streamlit as st
import pandas as pd
from utils.database import Database
from utils.styling import apply_custom_styling
import logging
from collections import defaultdict

logger = logging.getLogger(__name__)
apply_custom_styling()

def get_record_location(db, record):
    """Get batch and file information for a record"""
    try:
        # Get batch information
        batch_info = db.get_batch_by_id(record['batch_id'])
        batch_name = batch_info['name'] if batch_info else 'Unknown Batch'

        # Get file information
        file_info = db.get_file_by_id(record.get('file_id'))
        file_name = file_info['name'] if file_info and file_info.get('name') else ''

        # Construct location string
        if file_name:
            return f"{batch_name} / {file_name}"
        return batch_name

    except Exception as e:
        logger.error(f"Error getting record location: {e}")
        return "Unknown Location"

def display_relationship_card(record, db):
    """Display a single relationship card with profile image and details"""
    with st.container():
        st.markdown("""
        <style>
        .result-card {
            padding: 1rem;
            border-radius: 0.5rem;
            background-color: #f8f9fa;
            margin-bottom: 1rem;
            border: 1px solid #dee2e6;
        }
        </style>
        """, unsafe_allow_html=True)

        with st.container():
            st.markdown('<div class="result-card">', unsafe_allow_html=True)

            # Profile section with image and basic info
            cols = st.columns([1, 3])

            with cols[0]:
                # Profile image
                if record.get('photo_link'):
                    st.image(record['photo_link'], width=100)

            with cols[1]:
                st.markdown(f"### {record['‡¶®‡¶æ‡¶Æ']}")
                st.markdown(f"**‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç:** {record['‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç']}")

            # Location info with both batch name and file name
            st.markdown(f"üìç **‡¶∏‡ßç‡¶•‡¶æ‡¶®:** {get_record_location(db, record)}")

            # Main details
            col3, col4 = st.columns(2)
            with col3:
                st.markdown(f"**‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç:** {record['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç']}")
                st.markdown(f"**‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ:** {record['‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']}")
                st.markdown(f"**‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ:** {record['‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']}")
            with col4:
                st.markdown(f"**‡¶™‡ßá‡¶∂‡¶æ:** {record['‡¶™‡ßá‡¶∂‡¶æ']}")
                st.markdown(f"**‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ:** {record['‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ']}")
                st.markdown(f"**‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ:** {record['‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ']}")

            # Additional contact information
            st.markdown(f"**‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞:** {record.get('phone_number', '')}")
            st.markdown("**‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï:**")
            if record.get('facebook_link'):
                st.markdown(f"[{record.get('facebook_link', '')}]({record.get('facebook_link', '')})")

            # Description
            st.markdown(f"**‡¶¨‡¶ø‡¶¨‡¶∞‡¶£:** {record.get('description', '')}")

            # Relationship status
            st.markdown(f"**‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá‡¶∞ ‡¶ß‡¶∞‡¶£:** {record['relationship_status']}")

            st.markdown('</div>', unsafe_allow_html=True)

    # Add action button below the card
    if st.button(
        "üîÑ Regular ‡¶è ‡¶´‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶®‡¶ø‡¶®", 
        key=f"remove_{record['id']}", 
        type="secondary",
        use_container_width=True
    ):
        db.update_relationship_status(record['id'], 'Regular')
        st.success("‚úÖ Regular ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
        st.rerun()

def relationships_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    st.title("üë• ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶è‡¶¨‡¶Ç ‡¶∂‡¶§‡ßç‡¶∞‡ßÅ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")

    db = Database()

    # Get all batches
    batches = db.get_all_batches()

    if not batches:
        st.info("‡¶ï‡ßã‡¶® ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
        return

    # Batch selection
    selected_batch = st.selectbox(
        "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
        options=['‡¶∏‡¶¨ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö'] + [batch['name'] for batch in batches],
        format_func=lambda x: f"‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö: {x}"
    )

    # Create tabs for Friend, Enemy and Connected lists
    tab1, tab2, tab3 = st.tabs(["‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ", "‡¶∂‡¶§‡ßç‡¶∞‡ßÅ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ", "‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ"])

    def display_relationship_section(relationship_type):
        # Get records based on selection
        if selected_batch == '‡¶∏‡¶¨ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö':
            records = db.get_relationship_records(relationship_type)
        else:
            batch_id = next(batch['id'] for batch in batches if batch['name'] == selected_batch)
            records = [r for r in db.get_relationship_records(relationship_type) 
                      if r['batch_id'] == batch_id]

        if not records:
            st.info(f"‡¶ï‡ßã‡¶® {'‡¶¨‡¶®‡ßç‡¶ß‡ßÅ' if relationship_type == 'Friend' else '‡¶∂‡¶§‡ßç‡¶∞‡ßÅ' if relationship_type == 'Enemy' else '‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø'} ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø")
            return

        # Show total count
        st.write(f"‡¶Æ‡ßã‡¶ü: {len(records)}")

        # Display each record in a card format
        for record in records:
            display_relationship_card(record, db)

    with tab1:
        st.subheader("ü§ù ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
        display_relationship_section('Friend')

    with tab2:
        st.subheader("‚öîÔ∏è ‡¶∂‡¶§‡ßç‡¶∞‡ßÅ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
        display_relationship_section('Enemy')

    with tab3:
        st.subheader("üîó ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
        display_relationship_section('Connected')

if __name__ == "__main__":
    relationships_page()